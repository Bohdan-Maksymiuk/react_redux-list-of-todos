{"version":3,"sources":["store/actions.ts","store/index.ts","api/todos.ts","api/user.ts","components/TodoList/TodoList.tsx","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","CHANGE_TODO_STATUS","loadUserAction","payload","type","initialState","todos","user","store","createStore","state","action","map","todo","id","completed","API_URL","getTodos","a","fetch","response","json","CompletionStatus","getUser","userId","getTodosSelector","getUserSelector","TodoList","useState","titleQuery","setTitleQuery","titleQueryForSearch","setTitleQueryForSearch","All","completionStatus","setCompletionStatus","dispatch","useDispatch","setTitleQueryForSearchWithDebounce","useCallback","f","delay","timerId","clearTimeout","args","setTimeout","debounce","useSelector","selectedUser","useEffect","todosFromServer","handleUser","userFromServer","handleChangeTodoStatus","preparedTodos","isCompletedStatus","titleQueryToLowerCase","toLowerCase","Active","Completed","filter","title","includes","getPreparedTodos","className","htmlFor","value","onChange","event","query","target","classnames","checked","button","onClick","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"qQAAaA,EAAa,aACbC,EAAY,YACZC,EAAqB,qBAOrBC,EAAiB,SAACC,GAAD,MAA2B,CACvDC,KAAMJ,EACNG,YCPIE,EAAsB,CAC1BC,MAAO,GACPC,KAAM,MA+BKC,EAAQC,aA5BL,WAA4C,IAA3CC,EAA0C,uDAAlCL,EAAcM,EAAoB,uCACzD,OAAQA,EAAOP,MACb,KAAKL,EACH,OAAO,2BACFW,GADL,IAEEJ,MAAM,YAAKK,EAAOR,WAEtB,KAAKH,EACH,OAAO,2BACFU,GADL,IAEEH,KAAMI,EAAOR,UAEjB,KAAKF,EACH,OAAO,2BACFS,GADL,IAEEJ,MAAOI,EAAMJ,MAAMM,KAAI,SAAAC,GACrB,OAAIA,EAAKC,KAAOH,EAAOR,QACd,2BAAKU,GAAZ,IAAkBE,WAAYF,EAAKE,YAG9BF,OAGb,QACE,OAAOH,MAMEF,I,8DCvCFQ,G,MAAU,qCAEhB,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEACkBC,MAAM,GAAD,OAAIH,EAAJ,WADvB,cACCI,EADD,yBAGEA,EAASC,QAHX,4C,sBCAA,ICQFC,EDRQC,EAAO,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACEC,MAAM,GAAD,OAAIH,EAAJ,kBAAqBQ,IAD5B,cACfJ,EADe,yBAGdA,EAASC,QAHK,2CAAH,sDEFPI,EAAmB,SAACf,GAAD,OAAkBA,EAAMJ,OAE3CoB,EAAkB,SAAChB,GAAD,OAAkBA,EAAMH,M,iBDQlDe,K,OAAAA,E,sBAAAA,E,iBAAAA,M,KAeE,IAAMK,EAAqB,WAChC,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsDF,mBAAS,IAA/D,mBAAOG,EAAP,KAA4BC,EAA5B,KACA,EAAgDJ,mBAA2BN,EAAiBW,KAA5F,mBAAOC,EAAP,KAAyBC,EAAzB,KACMC,EAAWC,cAEXC,EAAqCC,sBAf7C,SAAkBC,EAA6BC,GAC7C,IAAIC,EAEJ,OAAO,WACLC,aAAaD,GADY,2BAAhBE,EAAgB,yBAAhBA,EAAgB,gBAEzBF,EAAUG,WAAU,WAAV,GAAWL,EAAGC,GAAd,OAAwBG,KAWlCE,CAASd,EAAwB,KACjC,IAGI1B,EAAQyC,YAAYtB,GACpBuB,EAAeD,YAAYrB,GASjCuB,qBAAU,YACP,+BAAA/B,EAAA,kCAAAA,EAAA,sEAC+BD,IAD/B,OACOiC,EADP,OAGCd,EJ9C+C,CACnDhC,KAAML,EACNI,QI4C6B+C,IAH1B,oGAKA,IAEH,IAAMC,EAAU,uCAAG,WAAO3B,GAAP,eAAAN,EAAA,yDACZ8B,GAAgBA,EAAalC,KAAOU,EADxB,gCAEcD,EAAQC,GAFtB,OAET4B,EAFS,OAIfhB,EAASlC,EAAekD,IAJT,2CAAH,sDAQVC,EAAyB,SAACvC,GAC9BsB,EJjDwD,CAC1DhC,KAAMH,EACNE,QI+CkCW,KA4B5BwC,EAzBmB,WACvB,IACIC,EADEC,EAAwBzB,EAAoB0B,cAGlD,OAAQvB,GACN,KAAKZ,EAAiBoC,OACpBH,GAAoB,EACpB,MACF,KAAKjC,EAAiBqC,UACpBJ,GAAoB,EACpB,MACF,QACE,OAAOjD,EAAMsD,QAAO,SAAA/C,GAAI,OACtBA,EAAKgD,MAAMJ,cACRK,SAASN,MAIlB,OAAOlD,EAAMsD,QAAO,SAAA/C,GAAI,OACtBA,EAAKgD,MAAMJ,cACRK,SAASN,KACND,EAAoB1C,EAAKE,WAAaF,EAAKE,cAI/BgD,GAEtB,OACE,sBAAKC,UAAU,WAAf,UACE,wCACA,wBAAOC,QAAQ,aAAf,2BAEG,IACD,uBACE7D,KAAK,OACLU,GAAG,aACHoD,MAAOrC,EACPsC,SAhEiB,SAACC,GACxB,IAAeC,EAAUD,EAAME,OAAvBJ,MAERpC,EAAcuC,GACd/B,EAAmC+B,SAgEjC,yBACEH,MAAOhC,EACPiC,SAAU,SAAAC,GAAK,OAAIjC,EAAoBiC,EAAME,OAAOJ,QAFtD,UAIE,wBAAQA,MAAO5C,EAAiBW,IAAhC,iBACA,wBAAQiC,MAAO5C,EAAiBqC,UAAhC,uBACA,wBAAQO,MAAO5C,EAAiBoC,OAAhC,uBAGF,qBAAKM,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGV,EAAc1C,KAAI,SAAAC,GAAI,OACrB,qBAEEmD,UAAWO,IACT,iBACA,CACE,0BAA2B1D,EAAKE,UAAW,6BAA8BF,EAAKE,YALpF,UASE,wBAAOkD,QAAO,mBAAcpD,EAAKC,IAAjC,UACE,uBACEV,KAAK,WACLU,GAAE,mBAAcD,EAAKC,IACrB0D,QAAS3D,EAAKE,UACdoD,SAAU,kBAAMd,EAAuBxC,EAAKC,OAE9C,4BAAID,EAAKgD,WAGX,yBACEG,UAAWO,IAAW,CACpBE,QAAQ,EACR,yBAAyB,EACzB,kCAAmCzB,GAAgBnC,EAAKW,SAAWwB,EAAalC,KAElFV,KAAK,SACLsE,QAAS,kBAAMvB,EAAWtC,EAAKW,SAPjC,sBAUGX,EAAKW,YA5BHX,EAAKC,eElHX6D,G,MAAwB,WACnC,IAAMpE,EAAOwC,YAAYrB,GACnBU,EAAWC,cAMjB,OAAK9B,EAKH,sBAAKyD,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,wDAAyBzD,EAAKO,QAEjE,oBAAIkD,UAAU,oBAAd,SAAmCzD,EAAKqE,OACxC,mBAAGZ,UAAU,qBAAb,SAAmCzD,EAAKsE,QACxC,mBAAGb,UAAU,qBAAb,SAAmCzD,EAAKuE,QAExC,wBACEd,UAAU,SACV5D,KAAK,SACLsE,QAAS,WAlBbtC,EAASlC,EAAe,QAetB,sBAXK,qDCKI6E,EAhBH,WACV,OACE,sBAAKf,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,cAAC,EAAD,YCLJgB,EAAO,kBACX,cAAC,IAAD,CAAUxE,MAAOA,EAAjB,SACE,cAAC,EAAD,OAIJyE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.90a8c8a7.chunk.js","sourcesContent":["export const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\nexport const CHANGE_TODO_STATUS = 'CHANGE_TODO_STATUS';\n\nexport const loadTodosAction = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const loadUserAction = (payload: User | null) => ({\n  type: LOAD_USER,\n  payload,\n});\n\nexport const changeTodoStatusAction = (payload: number) => ({\n  type: CHANGE_TODO_STATUS,\n  payload,\n});\n\n// export const prepareTodosAction = (payload: {\n//   query: string,\n//   completionStatus:\n// }) => ({\n//   type: CHANGE_TODO_STATUS,\n//   payload,\n// });\n","import { createStore } from 'redux';\n\nimport { LOAD_TODOS, LOAD_USER, CHANGE_TODO_STATUS } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case CHANGE_TODO_STATUS:\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          if (todo.id === action.payload) {\n            return { ...todo, completed: !todo.completed };\n          }\n\n          return todo;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n\nexport default store;\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n","import { API_URL } from './todos';\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from '../../api/todos';\nimport { getUser } from '../../api/user';\n\nimport { loadTodosAction, loadUserAction, changeTodoStatusAction } from '../../store/actions';\nimport { getTodosSelector, getUserSelector } from '../../store/selectors';\n\nenum CompletionStatus {\n  All = '',\n  Completed = 'completed',\n  Active = 'active',\n}\n\nfunction debounce(f: (...args: any[]) => void, delay: number) {\n  let timerId: NodeJS.Timeout;\n\n  return (...args: any[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n}\n\nexport const TodoList: React.FC = () => {\n  const [titleQuery, setTitleQuery] = useState('');\n  const [titleQueryForSearch, setTitleQueryForSearch] = useState('');\n  const [completionStatus, setCompletionStatus] = useState<CompletionStatus>(CompletionStatus.All);\n  const dispatch = useDispatch();\n\n  const setTitleQueryForSearchWithDebounce = useCallback(\n    debounce(setTitleQueryForSearch, 1000),\n    [],\n  );\n\n  const todos = useSelector(getTodosSelector);\n  const selectedUser = useSelector(getUserSelector);\n\n  const handleTitleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: query } = event.target;\n\n    setTitleQuery(query);\n    setTitleQueryForSearchWithDebounce(query);\n  };\n\n  useEffect(() => {\n    (async function loadTodosFromServer() {\n      const todosFromServer = await getTodos();\n\n      dispatch(loadTodosAction(todosFromServer));\n    }());\n  }, []);\n\n  const handleUser = async (userId: number) => {\n    if (!selectedUser || selectedUser.id !== userId) {\n      const userFromServer = await getUser(userId);\n\n      dispatch(loadUserAction(userFromServer));\n    }\n  };\n\n  const handleChangeTodoStatus = (id: number) => {\n    dispatch(changeTodoStatusAction(id));\n  };\n\n  const getPreparedTodos = () => {\n    const titleQueryToLowerCase = titleQueryForSearch.toLowerCase();\n    let isCompletedStatus: boolean;\n\n    switch (completionStatus) {\n      case CompletionStatus.Active:\n        isCompletedStatus = false;\n        break;\n      case CompletionStatus.Completed:\n        isCompletedStatus = true;\n        break;\n      default:\n        return todos.filter(todo => (\n          todo.title.toLowerCase()\n            .includes(titleQueryToLowerCase)\n        ));\n    }\n\n    return todos.filter(todo => (\n      todo.title.toLowerCase()\n        .includes(titleQueryToLowerCase)\n        && (isCompletedStatus ? todo.completed : !todo.completed)\n    ));\n  };\n\n  const preparedTodos = getPreparedTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label htmlFor=\"titleQuery\">\n        Find by Title:\n        {' '}\n        <input\n          type=\"text\"\n          id=\"titleQuery\"\n          value={titleQuery}\n          onChange={handleTitleQuery}\n        />\n      </label>\n\n      <select\n        value={completionStatus}\n        onChange={event => setCompletionStatus(event.target.value as CompletionStatus)}\n      >\n        <option value={CompletionStatus.All}>all</option>\n        <option value={CompletionStatus.Completed}>completed</option>\n        <option value={CompletionStatus.Active}>active</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {preparedTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed, 'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n            >\n              <label htmlFor={`checkbox-${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`checkbox-${todo.id}`}\n                  checked={todo.completed}\n                  onChange={() => handleChangeTodoStatus(todo.id)}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classnames({\n                  button: true,\n                  'TodoList__user-button': true,\n                  'TodoList__user-button--selected': selectedUser && todo.userId === selectedUser.id,\n                })}\n                type=\"button\"\n                onClick={() => handleUser(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","export const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { loadUserAction } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  const handleUserClear = () => {\n    dispatch(loadUserAction(null));\n  };\n\n  if (!user) {\n    return <div>No user selected</div>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={() => handleUserClear()}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}